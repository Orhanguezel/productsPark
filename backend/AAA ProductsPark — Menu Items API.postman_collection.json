{
  "info": {
    "_postman_id": "7a5f9f0a-7b3b-4d8e-9e2c-6b6a6c08f2a1",
    "name": "AAA ProductsPark — Custom Pages API",
    "description": "Public ve Admin Custom Pages uçları için uçtan uca test koleksiyonu.",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
    "_exporter_id": "20528167"
  },
  "item": [
    {
      "name": "Public Custom Pages",
      "item": [
        {
          "name": "List Custom Pages (public)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const data = pm.response.json();",
                  "pm.expect(data).to.be.an('array');",
                  "if (data.length) {",
                  "  const x = data[0];",
                  "  pm.environment.set('public_page_first_id', x.id);",
                  "  pm.environment.set('public_page_slug', x.slug);",
                  "  pm.test('Alanlar mevcut', () => {",
                  "    pm.expect(x).to.have.property('id');",
                  "    pm.expect(x).to.have.property('title');",
                  "    pm.expect(x).to.have.property('slug');",
                  "    pm.expect(x).to.have.property('content');",
                  "    pm.expect(x).to.have.property('is_published');",
                  "  });",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/custom_pages?order=created_at.desc&limit=5&is_published=1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "custom_pages"
              ],
              "query": [
                {
                  "key": "order",
                  "value": "created_at.desc"
                },
                {
                  "key": "limit",
                  "value": "5"
                },
                {
                  "key": "is_published",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Custom Page by ID (public)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get('public_page_first_id')) {",
                  "  postman.setNextRequest(null);",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const x = pm.response.json();",
                  "pm.expect(x).to.be.an('object');",
                  "pm.expect(x).to.have.property('id', pm.environment.get('public_page_first_id'));",
                  "pm.expect(x).to.have.property('slug');",
                  "pm.expect(x).to.have.property('content');"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{baseUrl}}/custom_pages/{{public_page_first_id}}"
          },
          "response": []
        },
        {
          "name": "Get Custom Page by Slug (public)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get('public_page_slug')) {",
                  "  postman.setNextRequest(null);",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const x = pm.response.json();",
                  "pm.expect(x).to.be.an('object');",
                  "pm.expect(x.slug).to.eql(pm.environment.get('public_page_slug'));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/custom_pages/by-slug/{{public_page_slug}}?locale={{locale}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "custom_pages",
                "by-slug",
                "{{public_page_slug}}"
              ],
              "query": [
                {
                  "key": "locale",
                  "value": "{{locale}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin Custom Pages",
      "item": [
        {
          "name": "Admin: List",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const data = pm.response.json();",
                  "pm.expect(data).to.be.an('array');",
                  "if (data.length) {",
                  "  const x = data[0];",
                  "  pm.environment.set('admin_page_first_id', x.id);",
                  "  pm.environment.set('admin_page_first_slug', x.slug);",
                  "  pm.test('Admin alanları', () => {",
                  "    pm.expect(x).to.have.property('id');",
                  "    pm.expect(x).to.have.property('title');",
                  "    pm.expect(x).to.have.property('slug');",
                  "    pm.expect(x).to.have.property('content');",
                  "    pm.expect(x).to.have.property('is_published');",
                  "  });",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Cookie",
                "value": "access_token={{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/custom_pages?sort=created_at&order=desc&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "custom_pages"
              ],
              "query": [
                {
                  "key": "sort",
                  "value": "created_at"
                },
                {
                  "key": "order",
                  "value": "desc"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin: Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.environment.set('timestamp', Date.now().toString());",
                  "pm.environment.unset('new_page_id');",
                  "pm.environment.unset('new_page_slug');"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"201 Created\", () => pm.response.to.have.status(201));",
                  "const x = pm.response.json();",
                  "pm.expect(x).to.be.an('object');",
                  "pm.expect(x).to.have.property('id');",
                  "pm.expect(x).to.have.property('slug');",
                  "pm.environment.set('new_page_id', x.id);",
                  "pm.environment.set('new_page_slug', x.slug);",
                  "pm.test('Alanlar doğru', () => {",
                  "  pm.expect(x).to.have.property('title');",
                  "  pm.expect(x).to.have.property('content');",
                  "  pm.expect(x).to.have.property('is_published');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Cookie",
                "value": "access_token={{access_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Page {{timestamp}}\",\n  \"slug\": \"test-page-{{timestamp}}\",\n  \"content\": \"<p>Public content for {{timestamp}}</p>\",\n  \"meta_title\": \"Meta {{timestamp}}\",\n  \"meta_description\": \"Meta description {{timestamp}}\",\n  \"is_published\": true\n}"
            },
            "url": "{{baseUrl}}/admin/custom_pages"
          },
          "response": []
        },
        {
          "name": "Admin: Get by ID",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get('new_page_id')) { postman.setNextRequest(null); }"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const x = pm.response.json();",
                  "pm.expect(x.id).to.eql(pm.environment.get('new_page_id'));",
                  "pm.expect(x.slug).to.eql(pm.environment.get('new_page_slug'));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Cookie",
                "value": "access_token={{access_token}}",
                "type": "text"
              }
            ],
            "url": "{{baseUrl}}/admin/custom_pages/{{new_page_id}}"
          },
          "response": []
        },
        {
          "name": "Admin: Update",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get('new_page_id')) { postman.setNextRequest(null); }",
                  "pm.environment.set('timestamp', Date.now().toString());"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const x = pm.response.json();",
                  "pm.test('Güncellendi', () => {",
                  "  pm.expect(x.title).to.include('Updated');",
                  "  pm.expect(x.is_published).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Cookie",
                "value": "access_token={{access_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Page Updated {{timestamp}}\",\n  \"content\": \"<p>Updated HTML {{timestamp}}</p>\",\n  \"is_published\": false\n}"
            },
            "url": "{{baseUrl}}/admin/custom_pages/{{new_page_id}}"
          },
          "response": []
        },
        {
          "name": "Admin: Get by Slug",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get('new_page_slug')) { postman.setNextRequest(null); }"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const x = pm.response.json();",
                  "pm.expect(x.slug).to.eql(pm.environment.get('new_page_slug'));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Cookie",
                "value": "access_token={{access_token}}",
                "type": "text"
              }
            ],
            "url": "{{baseUrl}}/admin/custom_pages/by-slug/{{new_page_slug}}"
          },
          "response": []
        },
        {
          "name": "Admin: Delete",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get('new_page_id')) { postman.setNextRequest(null); }"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"204 No Content\", () => pm.response.to.have.status(204));",
                  "// Silinen kaydı tekrar GET ederek 404 doğrula",
                  "pm.sendRequest({",
                  "  url: pm.environment.get('baseUrl') + '/admin/custom_pages/' + pm.environment.get('new_page_id'),",
                  "  method: 'GET',",
                  "  header: {",
                  "    'Authorization': 'Bearer ' + pm.environment.get('access_token'),",
                  "    'Cookie': 'access_token=' + pm.environment.get('access_token')",
                  "  }",
                  "}, (err, res) => {",
                  "  if (err) {",
                  "    console.log('Follow-up GET error:', err);",
                  "  } else {",
                  "    pm.test('After delete → 404', () => pm.expect(res.code).to.be.oneOf([404]));",
                  "  }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Cookie",
                "value": "access_token={{access_token}}",
                "type": "text"
              }
            ],
            "url": "{{baseUrl}}/admin/custom_pages/{{new_page_id}}"
          },
          "response": []
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://test.guezelwebdesign.com"
    },
    {
      "key": "access_token",
      "value": ""
    },
    {
      "key": "locale",
      "value": "tr"
    },
    {
      "key": "public_page_first_id",
      "value": ""
    },
    {
      "key": "public_page_slug",
      "value": ""
    },
    {
      "key": "admin_page_first_id",
      "value": ""
    },
    {
      "key": "new_page_id",
      "value": ""
    },
    {
      "key": "new_page_slug",
      "value": ""
    },
    {
      "key": "timestamp",
      "value": ""
    }
  ]
}
