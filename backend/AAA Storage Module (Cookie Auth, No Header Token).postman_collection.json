{
  "info": {
    "name": "AAA ProductsPark — Menu Items API",
    "_postman_id": "2f9f3c2a-8c6b-41f6-9c7a-pp-menu-items",
    "description": "Public ve Admin Menu Items uçları için uçtan uca test koleksiyonu.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    { "key": "baseUrl", "value": "https://test.guezelwebdesign.com" },
    { "key": "access_token", "value": "" },
    { "key": "public_menu_first_id", "value": "" },
    { "key": "admin_menu_first_id", "value": "" },
    { "key": "new_menu_id", "value": "" },
    { "key": "timestamp", "value": "" }
  ],
  "item": [
    {
      "name": "Public Menu Items",
      "item": [
        {
          "name": "List Menu Items (public)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/menu_items?order=display_order.asc&limit=5",
              "host": ["{{baseUrl}}"],
              "path": ["menu_items"],
              "query": [
                { "key": "order", "value": "display_order.asc" },
                { "key": "limit", "value": "5" }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const data = pm.response.json();",
                  "pm.expect(data).to.be.an('array');",
                  "if (data.length) {",
                  "  pm.environment.set('public_menu_first_id', data[0].id);",
                  "  pm.test('Öğe alanları', () => {",
                  "    const x = data[0];",
                  "    pm.expect(x).to.have.property('id');",
                  "    pm.expect(x).to.have.property('title');",
                  "    pm.expect(x).to.have.property('url');",
                  "    pm.expect(x).to.have.property('is_active');",
                  "  });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Menu Item by ID (public)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/menu_items/{{public_menu_first_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["menu_items", "{{public_menu_first_id}}"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get('public_menu_first_id')) {",
                  "  postman.setNextRequest(null);",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const x = pm.response.json();",
                  "pm.expect(x).to.be.an('object');",
                  "pm.expect(x).to.have.property('id', pm.environment.get('public_menu_first_id'));",
                  "pm.expect(x).to.have.property('title');",
                  "pm.expect(x).to.have.property('url');"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Admin Menu Items",
      "item": [
        {
          "name": "Admin: List",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{access_token}}", "type": "text" },
              { "key": "Cookie", "value": "access_token={{access_token}}", "type": "text" }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/menu_items?sort=display_order&order=asc&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "menu_items"],
              "query": [
                { "key": "sort", "value": "display_order" },
                { "key": "order", "value": "asc" },
                { "key": "limit", "value": "10" }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const data = pm.response.json();",
                  "pm.expect(data).to.be.an('array');",
                  "if (data.length) {",
                  "  pm.environment.set('admin_menu_first_id', data[0].id);",
                  "  pm.test('Admin normalize alanları', () => {",
                  "    const x = data[0];",
                  "    pm.expect(x).to.have.property('id');",
                  "    pm.expect(x).to.have.property('title');",
                  "    pm.expect(x).to.have.property('url');",
                  "    pm.expect(x).to.have.property('display_order');",
                  "    pm.expect(x).to.have.property('is_active');",
                  "  });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Admin: Create",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{access_token}}", "type": "text" },
              { "key": "Cookie", "value": "access_token={{access_token}}", "type": "text" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Item {{timestamp}}\",\n  \"url\": \"/deneme-{{timestamp}}\",\n  \"type\": \"custom\",\n  \"location\": \"header\",\n  \"is_active\": true,\n  \"display_order\": 999\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/menu_items",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "menu_items"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.environment.set('timestamp', Date.now().toString());"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"201 Created\", () => pm.response.to.have.status(201));",
                  "const x = pm.response.json();",
                  "pm.expect(x).to.be.an('object');",
                  "pm.expect(x).to.have.property('id');",
                  "pm.environment.set('new_menu_id', x.id);",
                  "pm.test('Alanlar doğru', () => {",
                  "  pm.expect(x).to.have.property('title');",
                  "  pm.expect(x).to.have.property('url');",
                  "  pm.expect(x).to.have.property('display_order');",
                  "  pm.expect(x).to.have.property('is_active');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Admin: Get by ID",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{access_token}}", "type": "text" },
              { "key": "Cookie", "value": "access_token={{access_token}}", "type": "text" }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/menu_items/{{new_menu_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "menu_items", "{{new_menu_id}}"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get('new_menu_id')) { postman.setNextRequest(null); }"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const x = pm.response.json();",
                  "pm.expect(x.id).to.eql(pm.environment.get('new_menu_id'));"
                ]
              }
            }
          ]
        },
        {
          "name": "Admin: Update",
          "request": {
            "method": "PATCH",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{access_token}}", "type": "text" },
              { "key": "Cookie", "value": "access_token={{access_token}}", "type": "text" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Item Updated {{timestamp}}\",\n  \"display_order\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/menu_items/{{new_menu_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "menu_items", "{{new_menu_id}}"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get('new_menu_id')) { postman.setNextRequest(null); }",
                  "pm.environment.set('timestamp', Date.now().toString());"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const x = pm.response.json();",
                  "pm.expect(x.title).to.include('Updated');",
                  "pm.expect(x.display_order).to.eql(100);"
                ]
              }
            }
          ]
        },
        {
          "name": "Admin: Reorder",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{access_token}}", "type": "text" },
              { "key": "Cookie", "value": "access_token={{access_token}}", "type": "text" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    { \"id\": \"{{new_menu_id}}\", \"display_order\": 0 }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/menu_items/reorder",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "menu_items", "reorder"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get('new_menu_id')) { postman.setNextRequest(null); }"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const x = pm.response.json();",
                  "pm.expect(x).to.have.property('ok', true);"
                ]
              }
            }
          ]
        },
        {
          "name": "Admin: Delete",
          "request": {
            "method": "DELETE",
            "header": [
              { "key": "Authorization", "value": "Bearer {{access_token}}", "type": "text" },
              { "key": "Cookie", "value": "access_token={{access_token}}", "type": "text" }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/menu_items/{{new_menu_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "menu_items", "{{new_menu_id}}"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": { "exec": [ "if (!pm.environment.get('new_menu_id')) { postman.setNextRequest(null); }" ] }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"204 No Content\", () => pm.response.to.have.status(204));",
                  "// Silinen kaydı tekrar GET ederek 404 doğrula",
                  "pm.sendRequest({",
                  "  url: pm.environment.get('baseUrl') + '/admin/menu_items/' + pm.environment.get('new_menu_id'),",
                  "  method: 'GET',",
                  "  header: {",
                  "    'Authorization': 'Bearer ' + pm.environment.get('access_token'),",
                  "    'Cookie': 'access_token=' + pm.environment.get('access_token')",
                  "  }",
                  "}, (err, res) => {",
                  "  if (err) {",
                  "    console.log('Follow-up GET error:', err);",
                  "  } else {",
                  "    pm.test('After delete → 404', () => pm.expect(res.code).to.be.oneOf([404]));",
                  "  }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
