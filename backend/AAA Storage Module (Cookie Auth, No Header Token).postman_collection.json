{
  "info": {
    "_postman_id": "c9cdb9f2-1e8a-4b2f-9b0b-pp-storage-updated",
    "name": "AAA Storage Module (Cookie Auth, No Header Token) — UPDATED",
    "description": "Storage public + admin uçları. Cookie-first auth; Authorization header kullanılmaz.",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Cookie-first: Authorization header kullanma",
          "pm.request.headers.remove('Authorization');",
          "// (Opsiyonel) İstenirse header auth",
          "const preferHeader = pm.environment.get('prefer_header_auth') === '1';",
          "const at = pm.environment.get('access_token');",
          "if (preferHeader && at) pm.request.headers.upsert({ key: 'Authorization', value: `Bearer ${at}` });"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Storage Public",
      "item": [
        {
          "name": "Public Serve Redirect (GET /storage/:bucket/*)",
          "request": {
            "auth": { "type": "noauth" },
            "method": "GET",
            "url": "{{base_url}}/storage/{{bucket}}/{{public_path}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": ["pm.test('302 or 404', () => pm.expect([302,404]).to.include(pm.response.code));"]
              }
            }
          ]
        },
        {
          "name": "Upload To Bucket (server-signed, multipart/form-data)",
          "request": {
            "auth": { "type": "noauth" },
            "method": "POST",
            "url": {
              "raw": "{{base_url}}/storage/{{bucket}}/upload?path={{upload_path}}",
              "host": ["{{base_url}}"],
              "path": ["storage", "{{bucket}}", "upload"],
              "query": [{ "key": "path", "value": "{{upload_path}}" }]
            },
            "body": {
              "mode": "formdata",
              "formdata": [
                { "key": "file", "type": "file", "src": [] }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', () => pm.response.to.have.status(200));",
                  "const j = pm.response.json();",
                  "if (j && j.path) pm.collectionVariables.set('public_path', j.path);"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Storage Upload Sign (Unsigned flow)",
      "item": [
        {
          "name": "Sign Multipart (Cloudinary unsigned)",
          "request": {
            "auth": { "type": "noauth" },
            "method": "POST",
            "url": "{{base_url}}/storage/uploads/sign-multipart",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"filename\": \"sample.jpg\",\n  \"content_type\": \"image/jpeg\",\n  \"folder\": \"{{folder}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', () => pm.response.to.have.status(200));",
                  "const j = pm.response.json();",
                  "pm.collectionVariables.set('cl_upload_url', j.upload_url || '');",
                  "pm.collectionVariables.set('cl_public_url', j.public_url || '');",
                  "pm.collectionVariables.set('cl_upload_preset', (j.fields && j.fields.upload_preset) || '');",
                  "pm.collectionVariables.set('cl_folder', (j.fields && j.fields.folder) || '');",
                  "pm.collectionVariables.set('cl_public_id', (j.fields && j.fields.public_id) || '');"
                ]
              }
            }
          ]
        },
        {
          "name": "Cloudinary Direct Upload (use sign response)",
          "request": {
            "auth": { "type": "noauth" },
            "method": "POST",
            "url": "{{cl_upload_url}}",
            "body": {
              "mode": "formdata",
              "formdata": [
                { "key": "file", "type": "file", "src": [] },
                { "key": "upload_preset", "type": "text", "value": "{{cl_upload_preset}}" },
                { "key": "folder", "type": "text", "value": "{{cl_folder}}" },
                { "key": "public_id", "type": "text", "value": "{{cl_public_id}}" }
              ]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "['cl_upload_url','cl_upload_preset','cl_public_id'].forEach(k=>{",
                  "  if(!pm.variables.get(k)) throw new Error(`Missing variable: ${k}. Run 'Sign Multipart' first.`);",
                  "});"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK (Cloudinary)', () => pm.response.to.have.status(200));",
                  "const r = pm.response.json();",
                  "// public_path: folder/public_id.format (backend redirect için)",
                  "const folder = pm.variables.get('cl_folder');",
                  "const pubid  = r.public_id || pm.variables.get('cl_public_id');",
                  "const ext    = r.format ? ('.' + r.format) : '';",
                  "const p = (folder ? (folder + '/') : '') + pubid + ext;",
                  "pm.collectionVariables.set('public_path', p);",
                  "pm.collectionVariables.set('cloudinary_secure_url', r.secure_url || '');"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Storage Admin",
      "item": [
        {
          "name": "Create Asset (admin, multipart)",
          "request": {
            "auth": { "type": "noauth" },
            "method": "POST",
            "url": "{{base_url}}/admin/storage/assets",
            "body": {
              "mode": "formdata",
              "formdata": [
                { "key": "file", "type": "file", "src": [] },
                { "key": "bucket", "type": "text", "value": "{{bucket}}" },
                { "key": "folder", "type": "text", "value": "{{folder}}" },
                { "key": "metadata", "type": "text", "value": "{\"alt\":\"Sample image\",\"source\":\"postman\"}" }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('201 Created or 200 Existing', () => pm.expect([200,201]).to.include(pm.response.code));",
                  "const j = pm.response.json();",
                  "if (j && j.id) pm.collectionVariables.set('admin_asset_id', j.id);",
                  "if (j && j.path) pm.collectionVariables.set('public_path', j.path);"
                ]
              }
            }
          ]
        },
        {
          "name": "List Assets (admin)",
          "request": {
            "auth": { "type": "noauth" },
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/admin/storage/assets?q={{q}}&bucket={{bucket}}&folder={{folder}}&mime={{mime}}&limit={{limit}}&offset={{offset}}&sort={{sort}}&order={{order}}",
              "host": ["{{base_url}}"],
              "path": ["admin", "storage", "assets"],
              "query": [
                { "key": "q", "value": "{{q}}" },
                { "key": "bucket", "value": "{{bucket}}" },
                { "key": "folder", "value": "{{folder}}" },
                { "key": "mime", "value": "{{mime}}" },
                { "key": "limit", "value": "{{limit}}" },
                { "key": "offset", "value": "{{offset}}" },
                { "key": "sort", "value": "{{sort}}" },
                { "key": "order", "value": "{{order}}" }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', () => pm.response.to.have.status(200));",
                  "pm.test('Has x-total-count', () => pm.response.headers.has('x-total-count'));"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Asset (admin) by ID",
          "request": { "auth": { "type": "noauth" }, "method": "GET", "url": "{{base_url}}/admin/storage/assets/{{admin_asset_id}}" }
        },
        {
          "name": "Patch Asset (admin)",
          "request": {
            "auth": { "type": "noauth" },
            "method": "PATCH",
            "url": "{{base_url}}/admin/storage/assets/{{admin_asset_id}}",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"name\": \"renamed-{{$timestamp}}.jpg\",\n  \"folder\": \"{{folder}}\",\n  \"metadata\": {\"note\":\"updated via postman\"}\n}" }
          }
        },
        {
          "name": "Delete Asset (admin)",
          "request": { "auth": { "type": "noauth" }, "method": "DELETE", "url": "{{base_url}}/admin/storage/assets/{{admin_asset_id}}" }
        },
        {
          "name": "Bulk Delete (admin)",
          "request": {
            "auth": { "type": "noauth" },
            "method": "POST",
            "url": "{{base_url}}/admin/storage/assets/bulk-delete",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"ids\": [\"{{admin_asset_id}}\"]\n}" }
          }
        },
        {
          "name": "List Folders (admin)",
          "request": { "auth": { "type": "noauth" }, "method": "GET", "url": "{{base_url}}/admin/storage/folders" }
        }
      ]
    }
  ],
  "variable": [
    { "key": "base_url", "value": "http://localhost:8081" },
    { "key": "bucket", "value": "default" },
    { "key": "folder", "value": "demo" },
    { "key": "upload_path", "value": "demo/file.jpg" },
    { "key": "public_path", "value": "demo/file.jpg" },
    { "key": "q", "value": "" },
    { "key": "mime", "value": "" },
    { "key": "limit", "value": "50" },
    { "key": "offset", "value": "0" },
    { "key": "sort", "value": "created_at" },
    { "key": "order", "value": "desc" },
    { "key": "admin_asset_id", "value": "" },
    { "key": "cl_upload_url", "value": "" },
    { "key": "cl_public_url", "value": "" },
    { "key": "cl_upload_preset", "value": "" },
    { "key": "cl_folder", "value": "" },
    { "key": "cl_public_id", "value": "" }
  ]
}
