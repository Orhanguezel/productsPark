{
  "info": {
    "_postman_id": "9dd3a0b0-bc7b-4b1c-9b3d-4e4f7f3c3a21",
    "name": "Storage Module (Cookie Auth, No Header Token)",
    "description": "Storage public + admin uçları. **Cookie-first** (Set-Cookie) oturum; Authorization header YOK.",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
    "_exporter_id": "20528167"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Cookie-first: Authorization header'ını kullanma",
          "pm.request.headers.remove('Authorization');",
          "// opsiyonel bayrak: isterse header auth'u açabilir",
          "const preferHeader = pm.environment.get('prefer_header_auth') === '1';",
          "const at = pm.environment.get('access_token');",
          "if (preferHeader && at) {",
          "  pm.request.headers.upsert({ key: 'Authorization', value: `Bearer ${at}` });",
          "}"
        ]
      }
    }
  ],
  "variable": [
    { "key": "bucket", "value": "default" },
    { "key": "public_path", "value": "demo/file.jpg" },
    { "key": "upload_path", "value": "demo/file.jpg" },
    { "key": "folder", "value": "demo" },
    { "key": "file_path", "value": "/absolute/path/to/local/file.jpg" },
    { "key": "admin_asset_id", "value": "" }
  ],
  "item": [
    {
      "name": "Auth (Optional helper)",
      "item": [
        {
          "name": "Login (sets cookie via Set-Cookie)",
          "request": {
            "auth": { "type": "noauth" },
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"password\"\n}" },
            "url": "{{base_url}}/auth/v1/token"
          },
          "event": [
            {
              "listen": "test",
              "script": { "type": "text/javascript", "exec": [
                "pm.test('Login OK', () => pm.response.to.have.status(200));",
                "// Cookie Postman tarafından otomatik tutulur."
              ] }
            }
          ]
        },
        {
          "name": "Logout",
          "request": { "auth": { "type": "noauth" }, "method": "POST", "url": "{{base_url}}/auth/v1/logout" }
        }
      ]
    },
    {
      "name": "Storage Public",
      "item": [
        {
          "name": "Public Serve Redirect (GET /storage/:bucket/*)",
          "request": {
            "auth": { "type": "noauth" },
            "method": "GET",
            "url": "{{base_url}}/storage/{{bucket}}/{{public_path}}"
          },
          "event": [
            {
              "listen": "test",
              "script": { "type": "text/javascript", "exec": [
                "pm.test('302 or 404', function () {",
                "  pm.expect([302, 404]).to.include(pm.response.code);",
                "});"
              ] }
            }
          ]
        },
        {
          "name": "Upload To Bucket (multipart/form-data)",
          "request": {
            "auth": { "type": "noauth" },
            "method": "POST",
            "url": {
              "raw": "{{base_url}}/storage/{{bucket}}/upload?path={{upload_path}}",
              "host": ["{{base_url}}"],
              "path": ["storage", "{{bucket}}", "upload"],
              "query": [{ "key": "path", "value": "{{upload_path}}" }]
            },
            "body": {
              "mode": "formdata",
              "formdata": [
                { "key": "file", "type": "file", "src": "{{file_path}}" }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": { "type": "text/javascript", "exec": [
                "pm.test('Uploaded', () => pm.response.to.have.status(200));",
                "const j = pm.response.json();",
                "if (j && j.path) pm.collectionVariables.set('public_path', j.path);"
              ] }
            }
          ]
        }
      ]
    },
    {
      "name": "Storage Upload Sign",
      "item": [
        {
          "name": "Sign PUT (S3 not configured → 501)",
          "request": {
            "auth": { "type": "noauth" },
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"filename\": \"sample.jpg\",\n  \"content_type\": \"image/jpeg\",\n  \"folder\": \"{{folder}}\"\n}"
            },
            "url": "{{base_url}}/storage/uploads/sign-put"
          },
          "event": [
            {
              "listen": "test",
              "script": { "type": "text/javascript", "exec": [
                "pm.test('501 Not Implemented (S3)', () => pm.response.to.have.status(501));"
              ] }
            }
          ]
        },
        {
          "name": "Sign Multipart (Cloudinary unsigned)",
          "request": {
            "auth": { "type": "noauth" },
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"filename\": \"sample.jpg\",\n  \"content_type\": \"image/jpeg\",\n  \"folder\": \"{{folder}}\"\n}"
            },
            "url": "{{base_url}}/storage/uploads/sign-multipart"
          },
          "event": [
            {
              "listen": "test",
              "script": { "type": "text/javascript", "exec": [
                "pm.test('OK', () => pm.response.to.have.status(200));",
                "const j = pm.response.json();",
                "if (j) {",
                "  pm.collectionVariables.set('sm_upload_url', j.upload_url || '');",
                "  pm.collectionVariables.set('sm_public_url', j.public_url || '');",
                "  pm.collectionVariables.set('sm_fields_json', JSON.stringify(j.fields || {}));",
                "}"
              ] }
            }
          ]
        }
      ]
    },
    {
      "name": "Storage Admin",
      "item": [
        {
          "name": "List Assets (admin)",
          "request": {
            "auth": { "type": "noauth" },
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/admin/storage/assets?q={{q}}&bucket={{bucket}}&folder={{folder}}&mime={{mime}}&limit={{limit}}&offset={{offset}}&sort={{sort}}&order={{order}}",
              "host": ["{{base_url}}"],
              "path": ["admin", "storage", "assets"],
              "query": [
                { "key": "q", "value": "{{q}}" },
                { "key": "bucket", "value": "{{bucket}}" },
                { "key": "folder", "value": "{{folder}}" },
                { "key": "mime", "value": "{{mime}}" },
                { "key": "limit", "value": "{{limit}}" },
                { "key": "offset", "value": "{{offset}}" },
                { "key": "sort", "value": "{{sort}}" },
                { "key": "order", "value": "{{order}}" }
              ]
            }
          },
          "event": [
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('OK', () => pm.response.to.have.status(200));",
              "pm.test('Has x-total-count', () => pm.response.headers.has('x-total-count'));"
            ] } }
          ]
        },
        {
          "name": "Create Asset (admin, multipart)",
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": [
              "pm.environment.set('ts', Date.now());"
            ] } },
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('Created 201 or 200 (existing)', () => pm.expect([200,201]).to.include(pm.response.code));",
              "const j = pm.response.json();",
              "if (j && j.id) {",
              "  pm.collectionVariables.set('admin_asset_id', j.id);",
              "  pm.collectionVariables.set('public_path', j.path || '');",
              "}",
              "if (j && j.bucket) pm.collectionVariables.set('bucket', j.bucket);"
            ] } }
          ],
          "request": {
            "auth": { "type": "noauth" },
            "method": "POST",
            "url": "{{base_url}}/admin/storage/assets",
            "body": {
              "mode": "formdata",
              "formdata": [
                { "key": "file", "type": "file", "src": "{{file_path}}" },
                { "key": "bucket", "type": "text", "value": "{{bucket}}" },
                { "key": "folder", "type": "text", "value": "{{folder}}" },
                { "key": "metadata", "type": "text", "value": "{\"alt\":\"Sample image\",\"source\":\"postman\"}" }
              ]
            }
          }
        },
        {
          "name": "Get Asset (admin) by ID",
          "request": { "auth": { "type": "noauth" }, "method": "GET", "url": "{{base_url}}/admin/storage/assets/{{admin_asset_id}}" },
          "event": [
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('OK', () => pm.response.to.have.status(200));"
            ] } }
          ]
        },
        {
          "name": "Patch Asset (admin)",
          "request": {
            "auth": { "type": "noauth" },
            "method": "PATCH",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"name\": \"renamed-{{ts}}.jpg\",\n  \"folder\": \"{{folder}}\",\n  \"metadata\": {\"note\":\"updated via postman\"}\n}" },
            "url": "{{base_url}}/admin/storage/assets/{{admin_asset_id}}"
          },
          "event": [
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('OK', () => pm.response.to.have.status(200));"
            ] } }
          ]
        },
        {
          "name": "List Folders (admin)",
          "request": { "auth": { "type": "noauth" }, "method": "GET", "url": "{{base_url}}/admin/storage/folders" },
          "event": [
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('OK', () => pm.response.to.have.status(200));",
              "const j = pm.response.json();",
              "pm.test('Array', () => Array.isArray(j));"
            ] } }
          ]
        },
        {
          "name": "Bulk Delete (admin)",
          "request": {
            "auth": { "type": "noauth" },
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"ids\": [\"{{admin_asset_id}}\"]\n}" },
            "url": "{{base_url}}/admin/storage/assets/bulk-delete"
          },
          "event": [
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('OK', () => pm.response.to.have.status(200));"
            ] } }
          ]
        },
        {
          "name": "Delete Asset (admin)",
          "request": { "auth": { "type": "noauth" }, "method": "DELETE", "url": "{{base_url}}/admin/storage/assets/{{admin_asset_id}}" },
          "event": [
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('204', () => pm.response.to.have.status(204));"
            ] } }
          ]
        }
      ]
    }
  ],
  "auth": { "type": "noauth" }
}
